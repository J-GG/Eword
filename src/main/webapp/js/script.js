$(document).ready(function() {

    //Enable the datatable plugin
    $('.datatable').DataTable();

    //Enable the button to mask/unmask the password in forms
    $(".unmask_password").click(function()
    {
        input = $(this).siblings("input");
        icon = $(this).children("span");
        if (input.prop("type") === "password")
        {
            input.prop("type", "text");
            icon.removeClass("glyphicon-eye-open");
            icon.addClass("glyphicon-eye-close");
        } else
        {
            input.prop("type", "password");
            icon.removeClass("glyphicon-eye-close");
            icon.addClass("glyphicon-eye-open");
        }
    });

    //When there is a click on the image, the dialog to send a file is displayed
    $(".img_box").click(function() {
        $(this).parents(".img_form").find(".img_uploader").click();
    });

    //When the image changes, the form is submitted
    $(".img_form input[type='file']").change(function()
    {
        $(this).parents("form").formValidation("revalidateField", $(this).prop("name"));
        $(this).parents("form").submit();
    });


    //****** SIGN UP FORM ******//
    defaultFormValidation("#signup_form");

    //****** SIGN IN FORM ******//
    //AJAX request to authenticate the user
    $("#signin_form").submit(function(event)
    {
        data = {username: $("#navbar_username").val(), password: $("#navbar_password").val(), remember_me: $("#navbar_remember_me").is(':checked')};
        text = $("#signin_submit").text();
        $("#signin_submit").html("<div class='loading'>&nbsp</div>");
        $("#signin_submit").prop("disabled", true);

        $.post({
            url: $("#signin_form").attr("action"),
            data: data,
            success: function(authenticationData)
            {
                $("#signin_submit").text(text);
                $("#signin_feedback").text(authenticationData.message);

                if (authenticationData.authentication)
                {
                    location.reload();
                    $("#signin_feedback").show().addClass("text-success").removeClass("text-danger").delay(1500).fadeOut(1500);
                } else
                {
                    $("#signin_submit").prop("disabled", false);
                    $("#signin_feedback").show().removeClass("text-success").addClass("text-danger").delay(1500).fadeOut(1500);
                }
            }
        });

        return false;
    });

    //****** ACCOUNT ******//

    imageForm("#user_account_picture_form");


    $('#user_account_birthdate_form input').datepicker({
        clearBtn: true
    }).on("changeDate", function(e) {
        $(this).parents("form").formValidation("revalidateField", "birthdate");
    });

    defaultFormValidation(".ajax_forms");
    ajaxFormValidation(".ajax_forms");
});

/**
 * Set up the FormValidation plugin for a form enabling to upload an image in ajax
 * @param {String} form A string containing a selector expression to match the form
 */
function imageForm(form)
{
    $(form).formValidation().on('success.form.fv', function(e, data) {
        //The error message generated by FormValidation is hidden
        $(form).find(".help-block").hide();


        //The file is retrieved before being transmitted
        formData = new FormData();
        file = $(form).find('.img_uploader')[0].files[0];
        input_name = $(this).find("input[type='file']").prop("name");
        formData.append(input_name, file);
        $(form).find(".img_overlay_loading").show();

        $.post({
            url: $(form).attr("action"),
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function(imageData)
            {
                $(form).find(".img_overlay_loading").hide();

                $.each(imageData, function(param, obj)
                {
                    if (imageData[param].error !== "null") {
                        //The error message is shown if there is any
                        $(form).find(".help-block[data-validator=perso]").text(imageData[param].error).show();
                        $("#user_account_picture_upload").parents(".form-group").removeClass("has-success").addClass("has-error");
                    } else {
                        //The picture is replaced with the new one
                        var src = $(form).find("img").prop("src");
                        $(form).find(".img_box img").prop("src", src.replace(src.substring(src.lastIndexOf("/") + 1), imageData[param].value + "?" + new Date().getTime()));
                    }
                });
            }
        });
    }).on('err.validator.fv', function(e, data) {
        //The error message from the application is hidden to display the message generated by FormValidation
        $(form).find(".help-block[data-validator=perso]").hide();
    });
}

/**
 * Set up the FormValidation plugin for a basic form
 * @param {String} form A string containing a selector expression to match the form
 */
function defaultFormValidation(form)
{
    $(form).formValidation({
        framework: 'bootstrap',
        icon: {
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh'
        }
    }).on('err.validator.fv', function(e, data) {
        data.element
                .data('fv.messages')
                // Hide all the erros
                .find('.help-block[data-fv-for="' + data.field + '"]').hide()
                // Show only errors associated with current validator
                .filter('[data-fv-validator="' + data.validator + '"]').show();
    });

    $(form).keydown(function(event)
    {
        //Hide the back end side generated errors and icons
        $(event.target).parents(".form-group").find('[data-validator="perso"]').hide();
        $(event.target).parents(".form-group").find('span.form-control-feedback').hide();
    });
}

/**
 * Set up the FormValidation plugin for a form enabling to update fields in ajax
 * @param {String} form A string containing a selector expression to match the form
 */
function ajaxFormValidation(form)
{
    $(".input_overlay").click(function()
    {
        $(this).addClass("hidden");
        $(this).parents(".form-group").find(".ajax_forms_edit_input").removeClass("hidden");
        $(this).parents(".form-group").find(".ajax_forms_edit_value").addClass("hidden");
    });

    $(form).formValidation().on('success.form.fv', function(e, data) {
        //We prevent the form from being submited
        e.preventDefault();

        form = this;

        //The error message generated by FormValidation is hidden
        $(this).find(".help-block").hide();

        //The fields are retrieved
        data = {};
        $(this).find("input,select").each(function()
        {
            data[$(this).prop("name")] = $(this).val();
        });

        $.post({
            url: $(this).attr("action"),
            data: data,
            success: function(ajaxData)
            {
                //We check if there are errors in the fields
                error = false;
                $.each(ajaxData, function(param, obj)
                {
                    if (obj.error !== "null")
                        error = true;
                });

                //If there are, the form is indicated as invalid. Otherwise, it is re-set to zero
                if (error)
                {
                    $(form).find(".form-group").removeClass("has-success").addClass("has-error");
                    $(form).find(".form-control-feedback").removeClass("glyphicon-ok").addClass("glyphicon-remove");
                } else
                {
                    $(form).data('formValidation').resetForm();
                    $(form).find(".ajax_forms_edit_value").removeClass("hidden");
                    $(form).find(".input_overlay").removeClass("hidden");
                    $(form).find(".ajax_forms_edit_input").addClass("hidden");
                }

                //For each field, the error message or the new value is shown depending or whether there are errors or not
                $.each(ajaxData, function(param, obj)
                {
                    if (obj.error !== "null")
                    {
                        $(form).find(".help-block[data-fv-for='" + param + "'][data-validator=perso]").text(obj.error).show()
                    } else {
                        if (obj.value === "null")
                            obj.value = "";
                        $(form).find(".ajax_forms_edit_value .ajax_forms_edit_value_text").text(obj.value);
                    }

                });
            }
        });
    });
}

function passwordStrength(value, validator) {
    var password = value;
    if (password === '') {
        return true;
    }
    var result = zxcvbn(password),
            score = result.score;

    // Update the progress bar width and add alert class
    var $bar = $('#strengthBar');
    switch (score) {
        case 0:
            $bar.attr('class', 'progress-bar progress-bar-danger')
                    .css('width', '1%');
            break;
        case 1:
            $bar.attr('class', 'progress-bar progress-bar-danger')
                    .css('width', '25%');
            break;
        case 2:
            $bar.attr('class', 'progress-bar progress-bar-success')
                    .css('width', '50%');
            break;
        case 3:
            $bar.attr('class', 'progress-bar progress-bar-success')
                    .css('width', '75%');
            break;
        case 4:
            $bar.attr('class', 'progress-bar progress-bar-success')
                    .css('width', '100%');
            break;
    }

    // We will treat the password as an invalid one if the score is less than 2
    if (score < 2) {
        return false;
    }

    return true;
}